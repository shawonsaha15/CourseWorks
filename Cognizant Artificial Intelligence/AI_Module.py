# -*- coding: utf-8 -*-
"""AI Module.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UECS_MOGoMCUBV_x1K60AyKTZJkhJN_p
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler

# Load the data
def load_data(path: str = "/path_to_csv"):
  """
  This function takes a path to CSV file as a string and loads into a Pandas
  Dataframe
  :param    path: str, relative path of the CSV file
  :return   df: pd.DataFrame
  """
  df = pd.read_csv(f"{path}")
  df = df.drop(columns=["Umnamed: 0"], inplace=True, errors='ignore')
  return df

# Create target variable and predictor variables
def create_target_and_predictors(
    data: pd.DataFrame = None,
    target: str = "estimated_stock_pct"
):
  """
  This function takes in Panda DataFrame and splits it into a target column
  and a set of predictor variables, i.e. X & y.
  These two splits of the data will be used to train a supervised machine
  learning model.

  :param data: pd.DataFrame, dataframe containing data for the model
  :param target: str, target variable that will be needed to predict
  :return X: pd.DataFrame
          y: pd.Series
  """
  # Check to see if target is present in the data
  if target not in data.columns:
    raise Exception(f"Target: {target} is not present in the data")

  # Define the variables for target variable and prediction variables
  X = data.drop(columns=[target])
  y = data[target]
  return X, y

# Train model
def train_model(
    X = pd.DataFrame = None
    y = pd.Series = None
):
  """
  This function takes the predictor and target variables and trains a Random
  Forest Regressor model across K folds. Using cross-validation, performance
  metrics will be output for each fold during training.

  :param X: pd.DataFrame, predictor variables
  :param y: pd.Series, target variable

  :return
  """
  # Create a list that wil store the accuracy for each folds
  accuracy = []

  # Enter a loop to run K folds of cross-validation
  for fold in range(0,K):

    # Instantiate algorithm and scalar
    model = RandomForestRegressor()
    scalar = StandardScalar()

    # Create training and testing samples
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=SPLIT,
                                                        random_state=42)

    # Scale the data
    scaler.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)

    # Train the model
    trained_model = model.fit(X_train, y_train)

    # Generate predictions on test samples
    y_pred = trained_model.predict(X_test)

    # Compute accuracy, using mean absolute error
    mae = mean_accuracy_error(y_true=y_test, y_pred=y_pred)
    accuracy.append(mae)
    print(f"Fold {fold + 1}: MAE = {mae:.3f}")

# Finish by printing the average mean absolute error across all folds
print(f"Average MAE: {(sum(accuracy) / len(accuracy)):.2f}")